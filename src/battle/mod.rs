mod lv0;
pub use lv0::EnemyLevel0;
mod lv1;
pub use lv1::EnemyLevel1;
mod lv2;
pub use lv2::EnemyLevel2;

use crate::app::{AppResult, Bullet, Player};
use ratatui::widgets::canvas::Shape;
use std::{fmt::Debug, time::Duration};

pub(crate) fn create_enemy(stage: usize) -> Option<Box<dyn Enemy>> {
    match stage {
        0 => Some(Box::new(EnemyLevel0::new())),
        1 => Some(Box::new(EnemyLevel1::new())),
        2 => Some(Box::new(EnemyLevel2::new())),
        _ => None,
    }
}

#[derive(Debug, Clone, Copy)]
pub enum EnemyAction {
    Die,
    Idle,
}

pub trait Enemy: Debug + Shape {
    fn tick(&mut self, delta: Duration, app: &mut Player) -> AppResult<EnemyAction>;

    fn hurt(&mut self, bullets: &mut Vec<Bullet>);

    /// Get bullets generated by this enemy
    fn bullets(&mut self) -> Vec<Bullet>;
}

pub struct DrawEnemy<'a>(pub &'a Box<dyn Enemy>);

impl Shape for DrawEnemy<'_> {
    fn draw(&self, painter: &mut ratatui::widgets::canvas::Painter) {
        self.0.draw(painter);
    }
}
